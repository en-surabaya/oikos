{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport let DiscipleshipJourney;\n\n(function (DiscipleshipJourney) {\n  DiscipleshipJourney[\"Engage\"] = \"ENGAGE\";\n})(DiscipleshipJourney || (DiscipleshipJourney = {}));\n\nexport let LeadershipStatus;\n\n(function (LeadershipStatus) {\n  LeadershipStatus[\"CampusMissionary\"] = \"CAMPUS_MISSIONARY\";\n  LeadershipStatus[\"Intern\"] = \"INTERN\";\n  LeadershipStatus[\"Leader\"] = \"LEADER\";\n  LeadershipStatus[\"Member\"] = \"MEMBER\";\n  LeadershipStatus[\"PotentialMember\"] = \"POTENTIAL_MEMBER\";\n})(LeadershipStatus || (LeadershipStatus = {}));\n\nexport let LifeGroupRole;\n\n(function (LifeGroupRole) {\n  LifeGroupRole[\"Leader\"] = \"LEADER\";\n  LifeGroupRole[\"Member\"] = \"MEMBER\";\n})(LifeGroupRole || (LifeGroupRole = {}));\n\nexport const UserFragmentFragmentDoc = gql`\n    fragment UserFragment on User {\n  id\n  name\n}\n    `;\nexport const GetUsersDocument = gql`\n    query getUsers {\n  users: getUsers {\n    ...UserFragment\n  }\n}\n    ${UserFragmentFragmentDoc}`;\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useGetUsersQuery(baseOptions) {\n  _s();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(GetUsersDocument, options);\n}\n\n_s(useGetUsersQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useGetUsersLazyQuery(baseOptions) {\n  _s2();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(GetUsersDocument, options);\n}\n\n_s2(useGetUsersLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"names":["gql","Apollo","defaultOptions","DiscipleshipJourney","LeadershipStatus","LifeGroupRole","UserFragmentFragmentDoc","GetUsersDocument","useGetUsersQuery","baseOptions","options","useQuery","useGetUsersLazyQuery","useLazyQuery"],"sources":["/home/djlie98/Codes/oikos/oikos-frontend/src/generated/graphql.tsx"],"sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type ActivateUserInput = {\n  activationToken: Scalars['String'];\n  password: Scalars['String'];\n  userId: Scalars['Int'];\n  username: Scalars['String'];\n};\n\nexport type CreateUserInput = {\n  date_of_birth?: InputMaybe<Scalars['String']>;\n  email?: InputMaybe<Scalars['String']>;\n  name: Scalars['String'];\n  phone?: InputMaybe<Scalars['String']>;\n  status: LeadershipStatus;\n};\n\nexport enum DiscipleshipJourney {\n  Engage = 'ENGAGE'\n}\n\nexport type Domain = {\n  __typename?: 'Domain';\n  address: Scalars['String'];\n  id: Scalars['Int'];\n  title: Scalars['String'];\n};\n\nexport type GqlLifeGroupMember = {\n  __typename?: 'GqlLifeGroupMember';\n  role: LifeGroupRole;\n  user: User;\n};\n\nexport type GqlUserLifeGroupRole = {\n  __typename?: 'GqlUserLifeGroupRole';\n  lifeGroup: LifeGroup;\n  role: LifeGroupRole;\n};\n\nexport type Jwt = {\n  __typename?: 'JWT';\n  access_token: Scalars['String'];\n};\n\nexport enum LeadershipStatus {\n  CampusMissionary = 'CAMPUS_MISSIONARY',\n  Intern = 'INTERN',\n  Leader = 'LEADER',\n  Member = 'MEMBER',\n  PotentialMember = 'POTENTIAL_MEMBER'\n}\n\nexport type LifeGroup = {\n  __typename?: 'LifeGroup';\n  domain?: Maybe<Domain>;\n  id: Scalars['Int'];\n  members: Array<GqlLifeGroupMember>;\n  title: Scalars['String'];\n};\n\nexport enum LifeGroupRole {\n  Leader = 'LEADER',\n  Member = 'MEMBER'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  activateUser: User;\n  addLifeGroupMember: LifeGroup;\n  attachDisciple: User;\n  createDomain: Domain;\n  createLifeGroup: LifeGroup;\n  createUser: User;\n  login: Jwt;\n  updateUser: User;\n};\n\n\nexport type MutationActivateUserArgs = {\n  input: ActivateUserInput;\n};\n\n\nexport type MutationAddLifeGroupMemberArgs = {\n  lifeGroupId: Scalars['Int'];\n  role: Scalars['String'];\n  userId: Scalars['Int'];\n};\n\n\nexport type MutationAttachDiscipleArgs = {\n  discipleId: Scalars['Int'];\n  leaderId: Scalars['Int'];\n};\n\n\nexport type MutationCreateDomainArgs = {\n  address: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationCreateLifeGroupArgs = {\n  title: Scalars['String'];\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n  userId: Scalars['Int'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getDomains: Array<Domain>;\n  getLifeGroups: Array<LifeGroup>;\n  getUsers: Array<User>;\n};\n\nexport type UpdateUserInput = {\n  date_of_birth?: InputMaybe<Scalars['String']>;\n  discipleshipJourney?: InputMaybe<DiscipleshipJourney>;\n  email?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  password?: InputMaybe<Scalars['String']>;\n  phone?: InputMaybe<Scalars['String']>;\n  status?: InputMaybe<LeadershipStatus>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  date_of_birth?: Maybe<Scalars['String']>;\n  disciples: Array<User>;\n  discipleshipJourney: DiscipleshipJourney;\n  domain?: Maybe<Domain>;\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['Int'];\n  leaders: Array<User>;\n  lifeGroups: Array<GqlUserLifeGroupRole>;\n  name: Scalars['String'];\n  phone?: Maybe<Scalars['String']>;\n  status: Scalars['String'];\n  username?: Maybe<Scalars['String']>;\n};\n\nexport type UserFragmentFragment = { __typename?: 'User', id: number, name: string };\n\nexport type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: number, name: string }> };\n\nexport const UserFragmentFragmentDoc = gql`\n    fragment UserFragment on User {\n  id\n  name\n}\n    `;\nexport const GetUsersDocument = gql`\n    query getUsers {\n  users: getUsers {\n    ...UserFragment\n  }\n}\n    ${UserFragmentFragmentDoc}`;\n\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, options);\n      }\nexport function useGetUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, options);\n        }\nexport type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;\nexport type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;\nexport type GetUsersQueryResult = Apollo.QueryResult<GetUsersQuery, GetUsersQueryVariables>;"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAMA,MAAMC,cAAc,GAAG,EAAvB;AACA;;AAwBA,WAAYC,mBAAZ;;WAAYA,mB;EAAAA,mB;GAAAA,mB,KAAAA,mB;;AA4BZ,WAAYC,gBAAZ;;WAAYA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAgBZ,WAAYC,aAAZ;;WAAYA,a;EAAAA,a;EAAAA,a;GAAAA,a,KAAAA,a;;AAuGZ,OAAO,MAAMC,uBAAuB,GAAGN,GAAI;AAC3C;AACA;AACA;AACA;AACA,KALO;AAMP,OAAO,MAAMO,gBAAgB,GAAGP,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA,MAAMM,uBAAwB,EANvB;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,gBAAT,CAA0BC,WAA1B,EAAwG;EAAA;;EACvG,MAAMC,OAAO,GAAG,EAAC,GAAGR,cAAJ;IAAoB,GAAGO;EAAvB,CAAhB;EACA,OAAOR,MAAM,CAACU,QAAP,CAAuDJ,gBAAvD,EAAyEG,OAAzE,CAAP;AACD;;GAHSF,gB;UAEDP,MAAM,CAACU,Q;;;AAEtB,OAAO,SAASC,oBAAT,CAA8BH,WAA9B,EAAgH;EAAA;;EAC7G,MAAMC,OAAO,GAAG,EAAC,GAAGR,cAAJ;IAAoB,GAAGO;EAAvB,CAAhB;EACA,OAAOR,MAAM,CAACY,YAAP,CAA2DN,gBAA3D,EAA6EG,OAA7E,CAAP;AACD;;IAHOE,oB;UAECX,MAAM,CAACY,Y"},"metadata":{},"sourceType":"module"}